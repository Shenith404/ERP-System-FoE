@using ERP_WorkLoadManagement.DTOs.AssignWorks.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@inject ISnackbar Snackbar

<MudContainer>
    <h3 class="text-center mb-4">Assign Other Work</h3>

    <MudCard>
        <MudCardContent>
            <MudForm Model="@model" @ref="@form" Validation="@(assignWorkValidator.ValidateValue)" ValidationDelay="0">
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect Label="Work" @bind-Value="@model.WorkId" Required="true">
                            @foreach (var work in workList)
                            {
                                <MudSelectItem Value="@work.WorkId">@work.WorkName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="Staff" @bind-Value="@model.StaffId" Required="true">
                            @foreach (var staff in staffList)
                            {
                                <MudSelectItem Value="@staff.StaffId">@staff.EmployeeName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Duration" Label="Duration" Required="true" For="@(() => model.Duration)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSwitch @bind-Checked="model.IsRejected" Label="Is Rejected" />
                    </MudItem>

@*                     <MudItem xs="12">
                        <MudTextField @bind-Value="model.AssignedDate" Label="Assigned Date" InputType="InputType.Date" />
                    </MudItem> *@

                    <MudItem xs="12">
                        <MudSelect Label="Assign By" @bind-Value="@model.AssignByUserId" Required="true">
                            @foreach (var user in userList)
                            {
                                <MudSelectItem Value="@user.UserId">@user.UserName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Assign Other</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public EventCallback OnAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateAssignWorkRequest model = new CreateAssignWorkRequest();

    AssignWorkModelValidator assignWorkValidator = new AssignWorkModelValidator();
    MudForm form;

    public class AssignWorkModelValidator : AbstractValidator<CreateAssignWorkRequest>
    {
        public AssignWorkModelValidator()
        {
            RuleFor(x => x.WorkId).NotEmpty().WithMessage("Work is Required.");
            RuleFor(x => x.StaffId).NotEmpty().WithMessage("Staff is Required.");
            RuleFor(x => x.Duration).NotEmpty().WithMessage("Duration is Required.");
            RuleFor(x => x.AssignByUserId).NotEmpty().WithMessage("Assign By User is Required.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateAssignWorkRequest>.CreateWithOptions((CreateAssignWorkRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                // var jsonmodel = JsonSerializer.Serialize(model);
                // var content = new StringContent(jsonmodel, Encoding.UTF8, "application/json");
                // var response = await Http.PostAsync("https://localhost:7010/api/assignworks", content);

                // if (response.IsSuccessStatusCode)
                // {
                //     await OnAdded.InvokeAsync();
                //     form.Reset();
                //     Snackbar.Add("Work assigned successfully", MudBlazor.Severity.Success);
                // }
                // else
                // {
                //     Snackbar.Add("Please check your connection.", MudBlazor.Severity.Error);
                // }
            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private List<(Guid WorkId, string WorkName)> workList = new List<(Guid WorkId, string WorkName)>
    {
        (Guid.NewGuid(), "Work A"),
        (Guid.NewGuid(), "Work B"),
        (Guid.NewGuid(), "Work C")
    };

    private List<(Guid StaffId, string EmployeeName)> staffList = new List<(Guid StaffId, string EmployeeName)>
    {
        (Guid.NewGuid(), "Staff Member A"),
        (Guid.NewGuid(), "Staff Member B"),
        (Guid.NewGuid(), "Staff Member C")
    };

    private List<(Guid UserId, string UserName)> userList = new List<(Guid UserId, string UserName)>
    {
        (Guid.NewGuid(), "User A"),
        (Guid.NewGuid(), "User B"),
        (Guid.NewGuid(), "User C")
    };
}
