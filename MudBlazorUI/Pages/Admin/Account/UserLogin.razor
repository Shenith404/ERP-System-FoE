@page "/login"
@layout NoNavLayout
@using Blazored.SessionStorage
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using MudBlazorUI.Auth.Services
@using MudBlazorUI.Core.DTOs.Request

<div class="page">
    <MudLayout>
        <div style="background-image: url('Assets/background-login.png'); background-size: cover; background-position: center; height: 430px; width: 100%; position: relative;">
            <div style="position: absolute; top: 0; left: 0; width: 100%;margin-top: -60px; height: 100%; display: flex; justify-content: center; align-items: center;">
                <MudImage Src="Assets/image3.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
                <div style="display: flex; flex-direction: column; align-items: center; padding-left: 20px; padding-right: 20px;">
                    <MudText Typo="Typo.h4" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold; ")">FACULTY OF ENGINEERING</MudText>
                    <MudText Typo="Typo.h5" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold;")">UNIVERSITY OF RUHUNA</MudText>
                </div>
                <MudImage Src="Assets/image2.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
            </div>
        </div>
        <div style="display: flex; justify-content: center; position: relative; margin-top: -160px; margin-bottom: 120px; margin-left: -90px;">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid Justify="Justify.Center" Class="mt-n10 pa-20">
                    <MudItem Class="mx-auto">
                        <MudCard Outlined="true" Style="border-radius: 10px; width: 140%; mx-auto;">
                            <MudCardContent Class="pa-20">
                                <MudText Align="Align.Center" Style="@($"color:{Colors.Blue.Darken4}; padding-top: 5px;")" Typo="Typo.h4">
                                    <span style="font-weight: bold; font-family: 'Inter'; font-size: 22px;">Welcome back</span>
                                </MudText>
                                <div class="mt-6">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1">Email</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.Email" For="@(() => model.Email)" LabelCentered="true" />
                                </div>
                                <div class="mt-4">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1">Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                                </div>
                                <MudLink Style="@($"padding-top: 10px; font-size: 13px; padding-left: 5px;")" Href="/forgotpassword" Underline="Underline.None">Forgotten your username or password?</MudLink>
                                <MudCheckBox Style="@($"font-size: 12px; padding-left: 5px;")" @bind-Value="RememberMe" Label="Remember Username" LabelTypography="Typo.h6" Class="mt-4" />
                            </MudCardContent>
                            <MudCardActions Style="@($"padding: 2px 10px 10px 10px;")">
                                <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Style="@($"width: 100%; height: 40px; border-radius: 7px; display: flex; justify-content: center; margin: auto; margin-bottom: 20px; margin-top: -10px;")">
                                    @if (_processing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Signing In</MudText>
                                    }
                                    else
                                    {
                                        <span style="font-family: 'Inter'; font-size: 12px;">Sign In</span>
                                    }
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </MudLayout>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private RegisterAccountForm model = new RegisterAccountForm();
    private bool success;
    private bool _processing = false;
    public bool RememberMe { get; set; } = true;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        await store.RemoveItemAsync("Email");
        await base.OnInitializedAsync();

        var res = await userProfile.GetRememberMe();
        if (res != null)
        {
            model.Email = res.UserName;
            model.Password = res.Password;
        }
    }

    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
    }

    private async void OnValidSubmit(EditContext context)
    {
        _processing = true;

        success = true;
        AuthenticationRequestDTO requestDTO = new AuthenticationRequestDTO
            {
                UserName = model.Email,
                Password = model.Password
            };
        var response = await jwtAuthenticationService.LoginAsync(requestDTO);
        await store.SetItemAsync("Email", model.Email);

        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        if (response.JwtToken != null || response.RefreshToken != null)
        {
            snackbar.Add(response.Message, MudBlazor.Severity.Success);

            //save the remember me
            if (RememberMe)
            {
                await userProfile.SetRememberMe(requestDTO);
            }
            NavigationManager.NavigateTo("/#");
            (authenticationStateProvider as CustomAuthenticationStateProvider)?.UpdateAuthenticationState();
        }
        else if (response.IsLocked == true)
        {
            snackbar.Add(response.Message, MudBlazor.Severity.Error);
            NavigationManager.NavigateTo("/accountrestricted");
        }
        else if (response.EmailConfirmed == false)
        {
            snackbar.Add(response.Message, MudBlazor.Severity.Error);
            NavigationManager.NavigateTo("/confirm-Email");
        }
        else if (response.Is2FAConfirmed == true)
        {
            snackbar.Add(response.Message, MudBlazor.Severity.Success);
            NavigationManager.NavigateTo("/verifiy2Fa");
        }
        else
        {
            snackbar.Add(response.Message, MudBlazor.Severity.Error);
        }

        _processing = false;
        StateHasChanged();
    }

    private async void GoToHomePage()
    {
        
    }
}
