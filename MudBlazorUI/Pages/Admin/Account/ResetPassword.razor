@page "/resetpassword"
@using MudBlazor
@layout NoNavLayout
@using System.ComponentModel.DataAnnotations
@using MudBlazorUI.Core.DTOs.Request
@inject HttpClient Http


<div class="page">
    <MudLayout>
        <div style="background-image: url('Assets/background-login.png'); background-size: cover; background-position: center; height: 430px; width: 100%; position: relative;">
            <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
                <MudImage Src="Assets/image3.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
                <div style="display: flex; flex-direction: column; align-items: center; padding-left: 20px; padding-right: 20px;">
                    <MudText Typo="Typo.h3" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold;")">FACULTY OF ENGINEERING</MudText>
                    <MudText Typo="Typo.h5" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold;")">UNIVERSITY OF RUHUNA</MudText>
                </div>
                <MudImage Src="Assets/image2.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
            </div>
        </div>
        <div style="display: flex; justify-content: center; position: relative; margin-top: -80px; margin-bottom: 100px; margin-left: -90px;">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid Justify="Justify.Center" Class="mt-n10 pa-20">
                    <MudItem Class="mx-auto">
                        <MudCard Outlined="true" Style="border-radius: 10px; width: 160%; mx-auto;">
                            <MudCardContent Class="pa-20">
                                <MudText Align="Align.Center" Style="@($"color:{Colors.Blue.Darken4}; padding-top: 10px;")" Typo="Typo.h4">
                                    <span style="font-weight: bold; font-family: 'Inter'; font-size: 22px;">Reset Password</span>
                                </MudText>
                           
                                <div class="mt-4">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1"> New Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                                </div>
                                <div class="mt-4 mb-4">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1"> Conform New Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
                                </div>
                                
                            </MudCardContent>
                            <MudCardActions Style="@($"padding: 2px 10px 10px 10px;")">
                                <MudButton @onclick="Submit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Style="@($"width: 100%; height: 40px; border-radius: 7px; display: flex; justify-content: center; margin: auto; margin-bottom: 20px; margin-top: -10px;")">
                                    <span style="font-family: 'Inter'; font-size: 12px;">Change Password</span>
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </MudLayout>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    ResetPasswordRequestDTO model = new ResetPasswordRequestDTO();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
    }

    public bool Basic_CheckBox4 { get; set; } = true;
  



    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        model.Email = queryParams["email"];
        model.Token = queryParams["token"];

        await base.OnInitializedAsync();

    }


    private async Task HandleResetPassword()
    {
        if (model.Password != model.ConfirmPassword)
        {
            snackbar.Add("Passwords do not match", Severity.Error);
            return;
        }

        if(string.IsNullOrEmpty(model.Email) || string.IsNullOrEmpty(model.Token))
        {
            snackbar.Add("Invalid Attempt", Severity.Error);

            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7111/ApiGateWay/Auth-api/Account/ForgotPassword-ChangePassword", model);
        var responseMessage = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            snackbar.Add("Password reset successful", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            snackbar.Add(responseMessage, Severity.Error);
        }
    }

    private  void OnValidSubmit(EditContext context)
    {
      
        success = true;
        StateHasChanged();
    }


    private async void Submit()
    {
        await HandleResetPassword();
    }
}
