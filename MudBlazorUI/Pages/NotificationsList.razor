@page "/Notifications"
@using Microsoft.IdentityModel.JsonWebTokens
@using MudBlazorUI.Notification_Service.DTOs
@using MudBlazorUI.Notification_Service.Services
@inject INotificationService notificationService
@inject ISnackbar snackbar
@using System.Net.Http.Json
@using System.Security.Claims
@inject IDialogService DialogService
@inject HttpClient httpClient

@attribute [Authorize]

<div style="height:100%;margin:80px 40px 10px 40px;">
    <MudTable  Height="70vh" Elevation="1"  ServerData="@(new Func<TableState, Task<TableData<NotificationResponseDTO>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h5">Notifications</MudText>
            <MudSpacer  />
            <div style="width:100%"></div>
            <MudTextField Style="width:300px;margin-right:10;" T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mr-0"></MudTextField>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 20%;" />
            <col  />
            <col style="width: 15%;" />
            <col style="width: 5%;" />
            <col style="width: 5%;" />
           
        </ColGroup>
        <HeaderContent >
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="NotificationResponseDTO">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="NotificationResponseDTO">Content</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="NotificationResponseDTO">Date</MudTableSortLabel></MudTh>
            <MudTh>
            </MudTh> 
            <MudTh>
                <MudTooltip Text="Mark All as Read">
                    <MudIconButton Disabled="!enableMarkAllAsReadBtn" Size="Size.Small" OnClick="()=>MarkAllAsRead()" Color="Color.Success" Icon="@(Icons.Material.Filled.MarkEmailUnread)"></MudIconButton>

                </MudTooltip>
            </MudTh>
        </HeaderContent>
        <RowTemplate >
           
           
            @if (context.ReadStatus == true)
            {
                <MudTd  DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Content">@context.Content</MudTd>
                <MudTd DataLabel="Date">@context.AddedDate</MudTd>
                <MudTd><MudButton OnClick="@(()=>OpenDialog(@context))" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled">View</MudButton></MudTd>

                <MudTd>
                    <MudIconButton Disabled Color="Color.Primary" Size="Size.Small" Icon="@(Icons.Material.Filled.MarkEmailRead)"></MudIconButton>
                </MudTd>
            }
            else
            {
                <MudTd Style="font-weight:bold" DataLabel="Title">@context.Title</MudTd>
                <MudTd Style="font-weight:bold" DataLabel="Content">@context.Content</MudTd>
                <MudTd Style="font-weight:bold" DataLabel="Date">@context.AddedDate</MudTd>
                <MudTd><MudButton OnClick="@(()=>OpenDialog(@context))" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">View</MudButton></MudTd>

                <MudTd>
                    <MudTooltip Text="Mark As Read">
                        <MudIconButton OnClick="() => MarkAsRead(context.Id)" Size="Size.Small" Color="Color.Success" Icon="@(Icons.Material.Filled.MarkEmailUnread)"></MudIconButton>

                    </MudTooltip>
                </MudTd>
            }
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>


<MudDialog @bind-IsVisible="visiblePersonalDialog" Options="dialogOptions">
    
    <DialogContent>
        <NotificationsView Notification="NotificationViewModel"></NotificationsView>
        <div class="d-flex justify-content-end" style="display:flex;justify-content:end">
             
            <MudButton OnClick="CloseDialog1" Color="Color.Primary">Close</MudButton>
                     
      
        </div>
        
       
        
    </DialogContent>
    
</MudDialog>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    private IEnumerable<NotificationResponseDTO> pagedData =[];
    private MudTable<NotificationResponseDTO> table = new MudTable<NotificationResponseDTO>();

    private int totalItems;
    private string searchString = "";
    private int totalUnreadItems = 0;
    private bool enableMarkAllAsReadBtn = false;


    //view Notification Dialog
    public NotificationResponseDTO NotificationViewModel { get; set; } 
    private bool visiblePersonalDialog=false;
    void CloseDialog1() => visiblePersonalDialog = false;
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async void OpenDialog(NotificationResponseDTO notificationResponseDTO)
    {
        NotificationViewModel = notificationResponseDTO;
        visiblePersonalDialog = true;
        if (notificationResponseDTO.ReadStatus == false)
        {
            await MarkAsRead(notificationResponseDTO.Id);

        }

    }

    private async Task<TableData<NotificationResponseDTO>> ServerReload(TableState state)
    {
        try
        {


            var user = (await AuthenticationState).User;
            var id = user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

            NotificationRequestDTO notificationRequestDTO = new NotificationRequestDTO
                {
                    ReceiverId = new Guid(id!),
                    SearchString = searchString
                };

            IEnumerable<NotificationResponseDTO> data = await notificationService.GetAllNotifications(notificationRequestDTO) ;
            await Task.Delay(300);
            if (data == null)
            {
                NavigationManager.NavigateTo("Server-Error");
                data = [];
            }

            data = data.Where(element =>
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (element.Content.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;

                return false;
            }).ToArray();

            totalItems = data.Count();
            totalUnreadItems = data.Count(x => !x.ReadStatus);
            enableMarkAllAsReadBtn = totalUnreadItems > 0;

            switch (state.SortLabel)
            {
                case "nr_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Title);
                    break;
                case "sign_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Content);
                    break;
                case "name_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.AddedDate);
                    break;
            }

            pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
            return new TableData<NotificationResponseDTO> { TotalItems = totalItems, Items = pagedData };

        }
        catch
        {
            NavigationManager.NavigateTo("/Server-Error");
            throw new Exception("Server Error");
        }


    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await table.ReloadServerData();
    }

    private async Task MarkAsRead(Guid id)
    {
        var result = await notificationService.MarkAsRead(id);
        StateHasChanged();
        if (!result)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            snackbar.Add("Please try again", Severity.Error);
        }
        else
        {
            await table.ReloadServerData();
        }
    }

    private async Task MarkAllAsRead()
    {
        var user = (await AuthenticationState).User;
        var id = user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
        var result = await notificationService.MarkAllAsRead(new Guid(id!));
        StateHasChanged();

        if (!result)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            snackbar.Add("Please try again", Severity.Error);
        }
        else
        {
            await table.ReloadServerData();
        }
    }
}
