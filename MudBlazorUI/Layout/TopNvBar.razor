@using MudBlazorUI.Auth.Services

@inject ISnackbar _snackbar
@inject AuthenticationStateProvider _authenticationStateProvider;


<MudAppBar Fixed="true" Dense="true" Style="background-color: rgba(0, 0, 0, 0.5); width: 100%">
    <MudContainer>
        <MudItem Justify="Justify.flexEnd" Style="width: 100%">
            <MudButton @onclick="() => NavigateToHome()" Style="color: white">Home</MudButton>
            <MudButton @onclick="() => NavigateToAbout()" Style="color: white">About</MudButton>

            <AuthorizeView>
                <Authorized>
                    <MudButton @onclick="() => LogOut()" Variant="Variant.Filled" Color="Color.Primary">Logout</MudButton>

                </Authorized> 
                <NotAuthorized>
                    <MudButton @onclick="() => NavigateToLogin()" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>

                </NotAuthorized>
            </AuthorizeView>
        
             </MudItem>
    </MudContainer>
</MudAppBar>

@code {
    private void NavigateToHome()
    {
        _snackbar.Clear();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        _snackbar.Add("message", MudBlazor.Severity.Success);
        // Navigate to the Home page
        NavigationManager.NavigateTo("/");
    }

    private async void NavigateToAbout()
    {
         var result = await jwtAuthenticationService.GetUserDetails();

        // Navigate to the About page
        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        snackbar.Add(result.UserName ?? "null", MudBlazor.Severity.Success);
        
    }

    private void NavigateToLogin()
    {

        NavigationManager.NavigateTo("/login");

    }

    private void LogOut()
    {
        (_authenticationStateProvider as CustomAuthenticationStateProvider)?.NotifyUserLogout();

    }

}
