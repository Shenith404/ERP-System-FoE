@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (_studentRequest != null)
{
    <MudPaper Elevation="4" Class="email-paper" Style="padding:20px;">
        <MudPaper Class="d-flex justify-center mb-5" Elevation="0" Style="background-color:#e3f2fd;">
            <h1 class="title">Incoming Student Request</h1>
        </MudPaper>

        <MudPaper Class="p-5" Elevation="4" Style="background-color:#e3f2fd;">
            <MudList Dense>
                <MudListItem>
                    <MudListItemIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" />
                    <MudListItemText>
                     <MudText Typo="Typo.h6" Class="header-text">
                         <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" Style="vertical-align: middle; margin-right: 4px;" />
                         Sender : @_studentRequest.SenderName
                     </MudText>
                     @* <MudText Typo="Typo.body1" Style="margin-left: 35px;">@_studentRequest.SenderName</MudText> *@
                    </MudListItemText>
                </MudListItem>
                
                <MudListItem>
                    <MudListItemIcon Icon="@Icons.Material.Filled.Badge" Color="Color.Secondary" />
                    <MudListItemText>
                            <MudText Typo="Typo.h6" Class="header-text">
                                <MudIcon Icon="@Icons.Material.Filled.AppRegistration" Color="Color.Primary" Style="vertical-align: middle; margin-right: 4px;" />
                            Registration Number : @_studentRequest.SenderRegistrationNum
                            </MudText>
                            @* <MudText Typo="Typo.body1" Style="margin-left: 35px;">@_studentRequest.SenderRegistrationNum</MudText> *@
                    </MudListItemText>
                </MudListItem>
                
                <MudListItem>
                        <MudText Typo="Typo.h6" Class="header-text">
                            <MudIcon Icon="@Icons.Material.Filled.Topic" Color="Color.Primary" Style="vertical-align: middle; margin-right: 4px;" />
                        Header : @GetTypeAsString(@_studentRequest.Header)
                        </MudText>
                        @* <MudText Typo="Typo.body1" Style="margin-left: 35px;">@GetTypeAsString(@_studentRequest.Header)</MudText> *@
                    
                </MudListItem>

                <MudDivider Class="my-4" />

                <MudListItem>
                    <MudListItemIcon Icon="@Icons.Material.Filled.Message" Color="Color.Warning" />
                    <MudListItemText>

                            <MudText Typo="Typo.h6" Class="header-text">
                                <MudIcon Icon="@Icons.Material.Filled.Message" Color="Color.Primary" Style="vertical-align: middle; margin-right: 4px;" />
                                Message
                            </MudText>
                            <MudText Typo="Typo.body1" Style="margin-left: 35px;">@_studentRequest.Message</MudText>
                    </MudListItemText>
                </MudListItem>
            </MudList>
        </MudPaper>

        <div class="d-flex justify-center mt-5">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Reply" Color="Color.Primary" @onclick="() => ViewModuleInformation(_studentRequest.SenderId)">
                Reply
            </MudButton>
        </div>
    </MudPaper>
}
else
{
    <p class="text-center">Module offering information not found.</p>
}

<style>
    .email-paper {
        margin-bottom: 20px;
        background-color: #fff;
    }

    .title {
        font-size: 2rem;
        font-weight: 500;
        color: #594AE2;
    }

    .header-text {
        font-weight: 400;
        color: #424242;
    }

    .message-text {
        color: #616161;
    }

    .d-flex {
        display: flex;
    }

    .justify-center {
        justify-content: center;
    }

    .mt-5 {
        margin-top: 2rem;
    }

    .mb-5 {
        margin-bottom: 2rem;
    }

    .p-5 {
        padding: 2rem;
    }

    .my-4 {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }

    .text-center {
        text-align: center;
    }
</style>

@code {
    [Parameter]
    public Guid RequestId { get; set; }
    [Parameter]
    public Guid SenderId { get; set; }

    private HttpClient Http = new HttpClient();

    private GetStudentMessagesResponse? _studentRequest;

    protected override async Task OnInitializedAsync()
    {
        await LoadModuleOfferingInfoAsync(RequestId);
    }

    private async Task LoadModuleOfferingInfoAsync(Guid requestId)
    {
        try
        {
            _studentRequest = await Http.GetFromJsonAsync<GetStudentMessagesResponse>($"https://localhost:7111/ApiGateWay/Request-api/StudentRequest/{requestId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while loading module offering: {ex.Message}", Severity.Error);
        }
    }

    private void ViewModuleInformation(Guid senderId)
    {
        NavigationManager.NavigateTo($"/RequestManagementTabs/RequestCreate/{senderId}");
    }

    private string GetTypeAsString(int type)
    {
        return type switch
        {
            1 => "Module Related",
            2 => "Medical",
            3 => "Academic Advice",
            4 => "Late Submissions",
            5 => "Other",
            _ => "Unknown"
        };
    }
}
