@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json;
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer Class="result-container">
    <h1 class="result-header pb-3" style="color:purple; text-align:center">Staff Incoming Requests</h1>
    <MudTable Items="_incomingStaffRequests" Dense="true" Hover="true" Bordered="true" Striped="false">
        <HeaderContent>
            <MudTh>Added Date</MudTh>
            <MudTh>Time</MudTh>
            <MudTh>Sender Name</MudTh>
            <MudTh>Header</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="request">
            <MudTd>@request.AddedDate.ToShortDateString()</MudTd>
                <MudTd>@request.AddedDate.ToShortTimeString()</MudTd>
                <MudTd>@request.SenderName</MudTd>
                <MudTd>@GetTypeAsString(request.Header)</MudTd>
                <MudTd>
                    <MudButton EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight" @onclick="() => ViewModuleInformation(request.SenderId, request.RequestId)"><b><ul style="text-decoration: underline;">View Details</ul></b></MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
</MudContainer>

    <style>
        .result-container {
            width: 130%; /* or any specific width you desire, e.g., 80%, 1200px, etc. */
        }
    </style>

@code {
    public String teacherId = "af8ad6c4-46f2-4bf8-9628-9cf34e122893";
    private HttpClient Http = new HttpClient();
    private List<GetStaffMessagesResponse> _incomingStaffRequests = new List<GetStaffMessagesResponse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadModulesAsync();
    }

    private async Task LoadModulesAsync()
    {
        _incomingStaffRequests = await Http.GetFromJsonAsync<List<GetStaffMessagesResponse>>($"https://localhost:7111/ApiGateWay/Request-api/StaffRequests/Incoming/{teacherId}");
        _incomingStaffRequests.Sort((x, y) => y.AddedDate.CompareTo(x.AddedDate));
    }

    private void ViewModuleInformation(Guid senderId, Guid requestId)
    {
        NavigationManager.NavigateTo($"/RequestManagementTabs/StaffRequest/Incoming/{requestId}/{senderId}");
    }

    private string GetTypeAsString(int type)
    {
        switch (type)
        {
            case 1:
                return "Module Related";
            case 2:
                return "Medical";
            case 3:
                return "Academic Advise";
            case 4:
                return "Late Submissions";
            case 5:
                return "Other";
            default:
                return "Unknown";
        }
    }

}

<link rel="stylesheet" href="styles.css" />