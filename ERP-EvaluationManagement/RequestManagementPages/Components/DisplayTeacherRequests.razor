@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json;
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudContainer Class="result-container">

    <h1 class="result-header pb-3" style="color:purple; text-align:center">Teacher Requests</h1>
    <MudTable Items="_teacherRequests" Dense="true" Hover="true" Bordered="true" Striped="false">
        <HeaderContent>
            <MudTh>Added Date</MudTh>
            <MudTh>Time</MudTh>
            <MudTh Width="120px">Reciever Name</MudTh>
            <MudTh>Reg No</MudTh>
            <MudTh>Header</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="request">
            <MudTd>@request.AddedDate.ToShortDateString()</MudTd>
            <MudTd>@request.AddedDate.ToShortTimeString()</MudTd>
            <MudTd>@request.RecieverName</MudTd>
            <MudTd>@request.RecieverRegistrationNum</MudTd>
            <MudTd>@GetTypeAsString(request.Header)</MudTd>
            <MudTd>
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteRequest(request.RequestId)" />
            </MudTd>
            <MudTd>
                <MudButton EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight" @onclick="() => ViewModuleInformation(request.SenderId, request.RequestId)">
                    <b><ul style="text-decoration: underline; font-size: 12px;">View details</ul></b>
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

    <style>
        .result-container {
            width: 135%; /* or any specific width you desire, e.g., 80%, 1200px, etc. */
        }
    </style>

@code {
    public String teacherId = "af8ad6c4-46f2-4bf8-9628-9cf34e122893";
    private HttpClient Http = new HttpClient();
    private List<GetTeacherMessagesResponse> _teacherRequests = new List<GetTeacherMessagesResponse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadModulesAsync();
    }

    private async Task LoadModulesAsync()
    {
        _teacherRequests = await Http.GetFromJsonAsync<List<GetTeacherMessagesResponse>>($"https://localhost:7111/ApiGateWay/Request-api/TeacherRequests/{teacherId}");
        _teacherRequests.Sort((x, y) => y.AddedDate.CompareTo(x.AddedDate));
    }

    private void ViewModuleInformation(Guid senderId, Guid requestId)
    {
        NavigationManager.NavigateTo($"/RequestManagementTabs/TeacherRequest/{requestId}/{senderId}");
    }

    async Task DeleteRequest(Guid requeestId)
    {
        var parameters = new DialogParameters { ["RequestId"] = requeestId };
        var dialog = await DialogService.ShowAsync<ConfirmDeleteTeacherRequest>("Confirm Delete", parameters);
        var result = await dialog.Result;
        await LoadModulesAsync();

    }

    private string GetTypeAsString(int type)
    {
        switch (type)
        {
            case 1:
                return "Module Related";
            case 2:
                return "Medical";
            case 3:
                return "Academic Advise";
            case 4:
                return "Late Submissions";
            case 5:
                return "Other";
            default:
                return "Unknown";
        }
    }
}

<link rel="stylesheet" href="styles.css" />