@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1" />
            Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            Are you sure you want to delete this request ?
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => Confirm())" Color="Color.Primary">Confirm</MudButton>
        <MudButton OnClick="@(() => Cancel())" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid RequestId { get; set; }

    private HttpClient Http = new HttpClient();

    private async Task Confirm()
    {
        try
        {
            // request message
            var request = new HttpRequestMessage
                {
                    Method = HttpMethod.Delete,
                    RequestUri = new Uri($"https://localhost:7111/ApiGateWay/Request-api/StaffRequest/{RequestId}")
                };

            // Send the request and await the response
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Request Deleted Successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {

                Snackbar.Add("Failed to delete request", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }


    private void Cancel()
    {
        MudDialog.Cancel();
    }
}